
Name: Bo Lin
Last 4 digits ID: 8270

CSE 6331, Cloud Computing					


Quiz Q4, 8.10, Summer 2020   (c) DL, UTA, 2020


  C&P means cut and paste only those relevant lines from your program(s) into this quiz.


 1.  I understand that I am on my honor during this quiz, I will not collaborate, use 
     non-allowed sources, and I will not discuss or share this quiz with anyone for the next 
     12 hours.
     You MAY: use Google to search, use previous source code, 
     YOU MAY NOT use:
     Email, Facebook, Hangouts, IM, chats, Skype or ANY other human connection.

     This is a timed test. Late tests will have points deducted for being late.
     Very late tests will not be graded.

     When you are complete, with any part, please send the link, raise your hand, so we may visually inspect that part.

     The second part of the test, you should electronically submit, you will need to copy and paste 
     only those lines of code to implement that part of the test, usually a few (two to eight) lines of code. 
     Place it immediately after the question.

     Submit this Quiz (renamed) with code cut and pasted, ONLY text. DO NOT submit zips, binaries, libraries,
     or anything other than text.

     When any parts(questions) are complete complete, submit this test, you may make multiple submissions.

     If you have computer, or other, problems, please raise your hand immediately.

     If you understand and agree, please initial here:
     _____B__L________

 2. Get files from this same folder.
   
 3. Name your program/submission with your name and last digits of your ID.

 4a. Using the cloud services provider, all functionality possible should be implemented on that provider.
     (Of course, displaying web pages through a browser and the user interface is "local")

 4b. Upload all data files (*csv, not this quiz) to cloud service. 
  
Show and submit code, when each part is complete, raise your hand and then show us:

 To recieve credit you MUST show (demo) AND submit the code (text only) on Canvas.

 5. Allow a user, through a web form, to give a country name, and range of years, then display a pie chart 
    where each pie slice is a percentage of the total for that range of years (that is for a country,
    if the year range was for 2001 to 2004, with the values: 5, 10, 10, 15; then the pie chart should show
    2001 with 5/(5+10+10+15) (1/8 pie slice), the 10's should be one quarter and 15 should be 3/8 pie slice.)
    Each pie slice should be in a different color, please show year labels outside each slice, and 
    percent inside each pie slice.
    Display the chart on that page, which is at least 3/4 (75 to 90%) the width of the screen. 

 6. Please show a page, followed by a bar chart on that page, where the user, through a web form, 
    will give a range of years and a country name and you will show a horizontal bar chart where for each year the bar represents 
    the number of smokers. Please "normalize" the lengths of bars so that the graph occupies half the width of the screen. 
    Please color the bars green, and show the number of smokers, inside each bar.

 7. Allow a user, through a web form, to give a country name, and a range of years, and
    show a point chart (scatter diagram)  where the X axis is the year 
    (please start with the first year given, which may be less than the data set, that is we may ask you
    to start with 1970, or end with 2020) and the Y axis is the number of smokers. 
    Please scale so that it fits on the screen.
 
 8. Show us, in a link, the application running and we will try it out. Only for parts 5, 6, 7

 9. When complete, return (send) this quiz
     If you finish early, send this immediately, otherwise send between
     the end of class and no more than 1 minute after that.


""""""""""Code""""""""""
"""Cloud Computing
Author: Bo Lin
Mav ID: 1001778270
Date: Jun/29/2020
"""

import os
from datetime import datetime
from flask import Flask, render_template
from flask_bootstrap import Bootstrap
from flask_sqlalchemy import SQLAlchemy
from flask_wtf import FlaskForm
from wtforms import fields, validators
from werkzeug.utils import secure_filename

import utils

app = Flask(__name__, static_folder='assets')
Bootstrap(app)

# config
app.config['host'] = '0.0.0.0'
app.config['port'] = int(os.getenv('PORT', '3463'))
app.config['SECRET_KEY'] = '1001778270'
app.config['allowed_csv_ext'] = {'csv', 'txt'}
app.config['project_dir'] = os.path.abspath(os.path.dirname(__file__))
app.config['upload_dir'] = os.path.join(app.config['project_dir'], 'assets')
app.config['db_path'] = os.path.join(app.config['upload_dir'], 'db.sqlite')
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////' + app.config['db_path']

db = SQLAlchemy(app)


class SmokeInfo(db.Model):
    id = db.Column(db.Integer,
                   nullable=False,
                   unique=True,
                   autoincrement=True,
                   primary_key=True)
    entity = db.Column(db.String(64))
    code = db.Column(db.String(5))
    year = db.Column(db.Integer)
    smokers = db.Column(db.Integer)


# form
class FileForm(FlaskForm):
    file = fields.FileField('Smokers Dataset File')
    submit = fields.SubmitField('Submit')


class PieForm(FlaskForm):
    entity = fields.StringField('Country Name')
    start = fields.IntegerField(
        'Start Year', validators=[validators.NumberRange(min=1980, max=2012)])
    end = fields.IntegerField(
        'End Year', validators=[validators.NumberRange(min=1980, max=2012)])
    submit = fields.SubmitField('Submit')


class BarForm(FlaskForm):
    entity = fields.StringField('Country Name')
    start = fields.IntegerField(
        'Start Year', validators=[validators.NumberRange(min=1980, max=2012)])
    end = fields.IntegerField(
        'End Year', validators=[validators.NumberRange(min=1980, max=2012)])
    submit = fields.SubmitField('Submit')


# router
@app.route('/', methods=['GET', 'POST'])
def index():
    title = 'Upload Smokers Dataset into Database'
    form = FileForm()
    if form.validate_on_submit():
        message = 'Upload Failed!'
        filename = secure_filename(form.file.data.filename)
        if utils.is_valid_ext(filename, app.config['allowed_csv_ext']):
            filename = os.path.join(app.config['upload_dir'], filename)
            form.file.data.save(filename)
            utils.insert_csv_to_db(filename, SmokeInfo, db)
            message = 'Upload Success!'
        return render_template('index.html',
                               title=title,
                               form=form,
                               message=message)
    return render_template('index.html', title=title, form=form)


@app.route('/pie_chart', methods=['GET', 'POST'])
def pie_chart():
    title = 'Pie Chart'
    form = PieForm()
    if form.validate_on_submit():
        entity = form.entity.data.title()
        start = form.start.data
        end = form.end.data
        label = []
        data = []
        for year in range(start, end + 1):
            label.append(str(year))
            result = SmokeInfo.query.filter((SmokeInfo.entity == entity)
                                            &
                                            (SmokeInfo.year == year)).first()
            data.append(result.smokers)
        viz = utils.get_viz('pie', label, data)
        return render_template('query.html',
                               title=title,
                               form=form,
                               viz=viz.render_embed(),
                               host=viz.js_host,
                               script_list=viz.js_dependencies.items)
    return render_template('query.html', title=title, form=form)


@app.route('/bar_chart', methods=['GET', 'POST'])
def bar_chart():
    title = 'Bar Chart'
    form = BarForm()
    if form.validate_on_submit():
        entity = form.entity.data.title()
        start = form.start.data
        end = form.end.data
        label = []
        data = []
        for year in range(start, end + 1):
            label.append(str(year))
            result = SmokeInfo.query.filter((SmokeInfo.entity == entity)
                                            &
                                            (SmokeInfo.year == year)).first()
            data.append(result.smokers)
        viz = utils.get_viz('bar', label, data)
        return render_template('query.html',
                               title=title,
                               form=form,
                               viz=viz.render_embed(),
                               host=viz.js_host,
                               script_list=viz.js_dependencies.items)
    return render_template('query.html', title=title, form=form)


@app.route('/scatter_chart', methods=['GET', 'POST'])
def scatter_chart():
    title = 'Scatter Chart'
    form = BarForm()
    if form.validate_on_submit():
        entity = form.entity.data.title()
        start = form.start.data
        end = form.end.data
        label = []
        data = []
        for year in range(start, end + 1):
            label.append(year)
            result = SmokeInfo.query.filter((SmokeInfo.entity == entity)
                                            &
                                            (SmokeInfo.year == year)).first()
            data.append(result.smokers)
        viz = utils.get_viz('scatter', label, data)
        return render_template('query.html',
                               title=title,
                               form=form,
                               viz=viz.render_embed(),
                               host=viz.js_host,
                               script_list=viz.js_dependencies.items)
    return render_template('query.html', title=title, form=form)


@app.errorhandler(404)
@app.route('/error_404')
def page_not_found(error):
    return render_template('404.html', title='404')


@app.errorhandler(500)
@app.route('/error_500')
def requests_error(error):
    return render_template('500.html', title='500')


#main
if __name__ == '__main__':
    utils.init_check(app.config['upload_dir'])
    db.create_all()
    app.run(host=app.config['host'], port=app.config['port'])

""""""""""Code""""""""""
"""utils funtion"""

import os
import math
from contextlib import contextmanager
from time import time
from datetime import datetime, timedelta
import pandas as pd
from pyecharts import charts, options


def init_check(*args):
    for path in args:
        if not os.path.exists(path):
            os.mkdir(path)


def is_valid_ext(filename, valid_ext=None):
    if valid_ext == None:
        return True
    _, ext = os.path.splitext(filename)
    return ext[1:] in valid_ext


def _csv2entity_list(csv_filename, Entity):
    entity_list = []
    df = pd.read_csv(csv_filename, skipinitialspace=True)
    for _, row in df.iterrows():
        entity_list.append(
            Entity(entity=row['Entity'],
                   code=row['Code'],
                   year=row['Year'],
                   smokers=row['Smokers']))
    return entity_list


def _insert_entity_to_db(entity_list, Entity, db):
    for entity in entity_list:
        result = Entity.query.filter_by(id=entity.id).first()  # TODO: check
        if result:
            result = entity
        else:
            db.session.add(entity)
    db.session.commit()


def insert_csv_to_db(csv_filename, Entity, db):
    entity_list = _csv2entity_list(csv_filename, Entity)
    _insert_entity_to_db(entity_list, Entity, db)


def get_viz(method, label, data):
    if method == 'bar':
        viz = charts.Bar()
        viz.add_xaxis(label)
        viz.add_yaxis('', data)
        viz.reversal_axis()
        viz.set_series_opts(label_opts=options.LabelOpts(position="right"))
    elif method == 'pie':
        data = [list(d) for d in zip(label, data)]
        viz = charts.Pie()
        viz.add('', data)
        viz.set_series_opts(label_opts=options.LabelOpts(formatter="{b}: {c}"))
    elif method == 'scatter':

        min_val = min(data)
        max_val = max(data)
        viz = charts.Scatter()
        viz.add_xaxis(label)
        viz.add_yaxis('', data)
        viz.set_global_opts(
            xaxis_opts=options.AxisOpts(
                type_="value",
                min_=label[0],
                max_=label[-1],
                splitline_opts=options.SplitLineOpts(is_show=True)),
            yaxis_opts=options.AxisOpts(
                type_="value",
                splitline_opts=options.SplitLineOpts(is_show=True)),
        )
    return viz