
Name:
Last 4 digits ID:

CSE 6331, Cloud Computing					

Quiz Q2, 8.10, Summer 2020   (c) DL, UTA, 2020


  C&P means cut and paste only those relevant lines from your program(s) into this quiz.


 1.  I understand that I am on my honor during this quiz, I will not collaborate, use 
     non-allowed sources, and I will not discuss or share this quiz with anyone for the next 
     12 hours.
     You MAY: use Google to search, use previous source code, 
     YOU MAY NOT use:
     Email, Facebook, Hangouts, IM, chats, Skype or ANY other human connection.

     This is a timed test. Late tests will have points deducted for being late.
     Very late tests will not be graded.

     When you are complete, with any part, please send the link, raise your hand, so we may visually inspect that part.

     The second part of the test, you should electronically submit, you will need to copy and paste 
     only those lines of code to implement that part of the test, usually a few (two to eight) lines of code. 
     Place it immediately after the question.

     Submit this Quiz (renamed) with code cut and pasted, ONLY text. DO NOT submit zips, binaries, libraries,
     or anything other than text.

     When any parts(questions) are complete complete, submit this test, you may make multiple submissions.

     If you have computer, or other, problems, please raise your hand immediately.

     If you understand and agree, please initial here:
     ______B_L________

 2. Get files from this same folder.
   
 3. Name your program/submission with your name and last digits of your ID.

 4a. Using the cloud services provider, all functionality possible should be implemented on that provider.
     (Of course, displaying web pages through a browser and the user interface is "local")

 4b. Upload all data files (*jpg and *csv, not this quiz) to cloud service. 
  
Show and submit code, when each part is complete, raise your hand and then show us:

 To recieve credit you MUST show (demo) AND submit the code (text only) on Canvas.

  5. Show a web page and interface (which resides on the cloud provider) with your name,
     and below that, Student ID at the top of every web page dispayed 
     (for this quiz). 
     Below that please show the picture "s.jpg".
     Please use a large font.
    
     The cloud service provider is either IBM Cloud (BlueMix) or Microsoft Azure.

     On that same page, please show the total number of earthquakes ("quakes") in the data set, 
     and give (location and id) the one with the greatest "depth" (largest "depth" value).  

  6. (Web page) Allow a user to give two location (pair) values (lat and long for two different locations) 
     and a value V, then: display the total number of quakes within that (bounding) box and after that
     set the depth of all quakes within that (bounding) box to the value V.

  7. (Web page), allow a user to give a partial location name (for example "Tonopah" or "Nevada") and 
     a minimum magnitude ("mag", for example for min mag of 4.00), so quakes with "Tonopah" or "Nevada",
     with mag greater than 4.00) display the 10 oldest in the data set.
     For each quake, please display the lat, long, mag, place, depth and date.

  8. (Web page), allow a user to give a part of a location name (for example "Mina" or "Nevada") 
     and a distance (for example 250 km), and show the largest magnitude quake (if one exists),
     within that distance.
     Please display the lat, long, mag, place, depth and date.
     Then allow the user to change the location name.

  9. Show us, in a link, the application running and we will try it out. Only for parts 5, 6, 7, 8

  10. When complete, return (send) this quiz
      If you finish early, send this immediately, otherwise send between
      the end of class and no more than 1 minute after that.



# db entity
class EarthquakeInfo(db.Model):
    time = db.Column(db.DateTime, nullable=False)
    latitude = db.Column(db.Float, nullable=False)
    longitude = db.Column(db.Float, nullable=False)
    depth = db.Column(db.Float, nullable=False)
    mag = db.Column(db.Float, nullable=True)
    gap = db.Column(db.Float, nullable=True)
    id = db.Column(db.String(15),
                   nullable=False,
                   unique=True,
                   primary_key=True)
    place = db.Column(db.String(100), nullable=False)
    locationSource = db.Column(db.String(5), nullable=False)


# form
class FileForm(FlaskForm):
    file = fields.FileField('Earthquake CSV File')
    submit = fields.SubmitField('Submit')


class ModifyForm(FlaskForm):
    lat1 = fields.FloatField(
        'latitude 1', validators=[validators.NumberRange(min=-90, max=90)])
    long1 = fields.FloatField(
        'longitude 1', validators=[validators.NumberRange(min=-180, max=180)])
    lat2 = fields.FloatField(
        'latitude 2', validators=[validators.NumberRange(min=-90, max=90)])
    long2 = fields.FloatField(
        'longitude 2', validators=[validators.NumberRange(min=-180, max=180)])
    depth_value = fields.FloatField('Depth value')
    submit = fields.SubmitField('Submit')


class LocationForm(FlaskForm):
    location = fields.StringField('Location')
    mag = fields.FloatField('Magnitude',
                            validators=[validators.NumberRange(min=0)])
    submit = fields.SubmitField('Submit')


class DistanceForm(FlaskForm):
    location = fields.StringField('Location')
    distance = fields.FloatField('Distance',
                                 validators=[validators.NumberRange(min=0)])
    modified = fields.StringField('Modified Location')
    submit = fields.SubmitField('Submit')


# router
@app.route('/', methods=['GET', 'POST'])
def index():
    title = "Upload CSV to Database"
    form = FileForm()
    all_info = EarthquakeInfo.query.order_by(EarthquakeInfo.depth.desc()).all()
    number = len(all_info)
    result = all_info[:1]
    if form.validate_on_submit():
        upload_status = 'failed'
        filename = secure_filename(form.file.data.filename)
        if is_valid_ext(filename, app.config['allowed_csv_ext']):
            filename = os.path.join(app.config['upload_dir'], filename)
            form.file.data.save(filename)
            insert_csv_to_db(filename, EarthquakeInfo, db)
            upload_status = 'success'
            all_info = EarthquakeInfo.query.order_by(
                EarthquakeInfo.depth.desc()).all()
            number = len(all_info)
            result = all_info[:1]
        return render_template('index.html',
                               title=title,
                               form=form,
                               upload_status=upload_status,
                               number=number,
                               result=result)
    return render_template('index.html',
                           title=title,
                           form=form,
                           number=number,
                           result=result)


@app.route('/modify', methods=['GET', 'POST'])
def modify():
    title = 'Modify'
    form = ModifyForm()
    if form.validate_on_submit():
        lat1 = form.lat1.data
        lon1 = form.long1.data
        lat2 = form.lat2.data
        lon2 = form.long2.data
        depth_value = form.depth_value.data
        result = EarthquakeInfo.query
        low_lat = min(lat1, lat2)
        high_lat = max(lat1, lat2)
        low_lon = min(lon1, lon2)
        high_lon = max(lon1, lon2)
        all_info = EarthquakeInfo.query.filter(
            (EarthquakeInfo.latitude >= low_lat)
            & (EarthquakeInfo.latitude <= high_lat)
            & (EarthquakeInfo.longitude >= low_lon)
            & (EarthquakeInfo.longitude <= high_lon)).all()
        for info in all_info:
            info.depth = depth_value
        db.session.commit()
        return render_template('query.html',
                               title=title,
                               form=form,
                               result=all_info)
    return render_template('query.html', title=title, form=form)


@app.route('/location', methods=['GET', 'POST'])
def location():
    form = LocationForm()
    if form.validate_on_submit():
        location = form.location.data
        min_mag = form.mag.data
        result = EarthquakeInfo.query.filter(
            (EarthquakeInfo.mag >= min_mag)
            & (EarthquakeInfo.place == location)).order_by(
                EarthquakeInfo.time).limit(10).all()
        return render_template('query.html', form=form, result=result)
    return render_template('query.html', form=form)


@app.route('/distance', methods=['GET', 'POST'])
def distance():
    title = "The largest magnitude earthquake within {distance} from {where}"
    form = DistanceForm()
    if form.validate_on_submit():
        location = form.location.data
        distance = form.distance.data
        modified = form.modified.data
        all_info = EarthquakeInfo.query.filter(
            (EarthquakeInfo.place == location)).all()
        center_lat = 0
        center_lon = 0
        count = 0
        for info in all_info:
            center_lat += info.latitude
            center_lon += info.longitude
            count += 1
        center_lat /= count
        center_lon /= count
        all_info = EarthquakeInfo.query.order_by(
            EarthquakeInfo.mag.desc()).all()
        result = []
        for info in all_info:
            if sphere_distance([center_lat, center_lon],
                               [info.latitude, info.longitude]) <= distance:
                info.place = modified
                db.session.commit()
                result.append(info)
                break
        return render_template('query.html',
                               title=title,
                               form=form,
                               result=result)
    return render_template('query.html', title=title, form=form)


@app.errorhandler(404)
@app.route('/error_404')
def page_not_found(error):
    return render_template('404.html', title='404')


@app.errorhandler(500)
@app.route('/error_500')
def requests_error(error):
    return render_template('500.html', title='500')


if __name__ == "__main__":
    init_check(app.config['upload_dir'])
    db.create_all()
    app.run(host=app.config['host'], port=app.config['port'])