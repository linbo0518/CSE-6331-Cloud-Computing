
Name:
Last 4 digits ID:

CSE 6331, Cloud Computing					


Quiz Q1, 8.10, Summer 2020   (c) DL, UTA, 2020


  C&P means cut and paste only those relevant lines from your program(s) into this quiz.


 1.  I understand that I am on my honor during this quiz, I will not collaborate, use 
     non-allowed sources, and I will not discuss or share this quiz with anyone for the next 
     12 hours.
     You MAY: use Google to search, use previous source code, 
     YOU MAY NOT use:
     Email, Facebook, Hangouts, IM, chats, Skype or ANY other human connection.

     This is a timed test. Late tests will have points deducted for being late.
     Very late tests will not be graded.

     When you are complete, with any part, please send the link, raise your hand, so we may visually inspect that part.

     The second part of the test, you should electronically submit, you will need to copy and paste 
     only those lines of code to implement that part of the test, usually a few (two to eight) lines of code. 
     Place it immediately after the question.

     Submit this Quiz (renamed) with code cut and pasted, ONLY text. DO NOT submit zips, binaries, libraries,
     or anything other than text.

     When any parts(questions) are complete complete, submit this test, you may make multiple submissions.

     If you have computer, or other, problems, please raise your hand immediately.

     If you understand and agree, please initial here:
     _____B__L________

 2. Get files from this same folder.
   
 3. Name your program/submission with your name and last digits of your ID.

 4a. Using the cloud services provider, all functionality possible should be implemented on that provider.
     (Of course, displaying web pages through a browser and the user interface is "local")

 4b. Upload all data files (*jpg and *csv, not this quiz) to cloud service. 
  
Show and submit code, when each part is complete, raise your hand and then show us:

 To recieve credit you MUST show (demo) AND submit the code (text only) on Canvas.

 5. Show a web page and interface (which resides on the cloud provider) with 
    the picture "c.jpg" at the top, below that your name and below that your student ID.
    For all questions after this one, on the top of each page, please show your name, 
    then below that your ID.
    Please use a large font.
    The cloud service provider is IBM Cloud (BlueMix).

 6. Please show a web interface that allows a user to enter a value. (Such as 3 or 3.01 or "fish")
    Then display that value, and below that a text which say "Even" or "Odd", indicating
    that the value is even or odd. If the value is not even or odd (for example "fish") display "Not Known". 
    Display the result on a web page.

 7. (Web Page) allow a user to give a range of room numbers (for example: 60 to 100), and you will show 
    all the names, pictures, and captions of ALL people within that range.

 8. (Web Page) allow a user to give ID or a Room number, and allow a user to change the Name or the Picture.

 9. Show us, in a link, the application running and we will try it out. Only for parts 5, 6, 7, 8

 10. When complete, return (send) this quiz
     If you finish early, send this immediately, otherwise send between
     the end of class and no more than 1 minute after that.



##### Database Entity #####
'''python
class Entity(db.Model):
    name = db.Column(db.String(20),
                     unique=True,
                     nullable=False,
                     primary_key=True)
    id = db.Column(db.Integer, nullable=True)
    room = db.Column(db.Integer, nullable=True)
    state = db.Column(db.String(2), nullable=True)
    picture = db.Column(db.String(20), nullable=True)
    caption = db.Column(db.String(100), nullable=True)
'''

##### Helper Function #####
'''python
def _csv2entity_list(csv_filename):
    entity_list = []
    df = pd.read_csv(csv_filename, skipinitialspace=True)
    for _, row in df.iterrows():
        entity_list.append(
            Entity(name=row['Name'],
                   id=row['ID'],
                   room=row['Room'],
                   state=row['State'],
                   picture=row['Picture'],
                   caption=row['Caption']))
    return entity_list


def _insert_entity_to_db(entity_list):
    for entity in entity_list:
        result = Entity.query.filter_by(name=entity.name).first()
        if result:
            result = entity
        else:
            db.session.add(entity)
    db.session.commit()


def insert_csv_to_db(csv_filename):
    entity_list = _csv2entity_list(csv_filename)
    _insert_entity_to_db(entity_list)


def check_image_file_exist(result):
    for entity in result:
        if entity.picture:
            if not os.path.exists(
                    os.path.join(app.config['image_upload_dir'],
                                 entity.picture)):
                entity.picture = None
    return result
'''

##### router #####
'''python
@app.route('/', methods=['GET', 'POST'])
def index():
    form = NameForm()
    if form.validate_on_submit():
        name = form.name.data
        message = ''
        try:
            number = int(name)
            if (number % 2 == 0):
                message = 'Even'
            else:
                message = 'Odd'
        except:
            message = 'Not Known'
        return render_template('index.html',
                               form=form,
                               name=name,
                               message=message,
                               image_name='c.png')
    return render_template('index.html',
                           form=form,
                           name=None,
                           image_name='c.png')


@app.route('/upload_csv', methods=['GET', 'POST'])
def upload_csv():
    form = UploadForm()
    if form.validate_on_submit():
        filename = secure_filename(form.upload_file.data.filename)
        if is_valid_ext(filename, app.config['allowed_csv_ext']):
            filename = os.path.join(app.config['csv_upload_dir'], filename)
            form.upload_file.data.save(filename)
            insert_csv_to_db(filename)
            return render_template('index.html',
                                   form=form,
                                   upload_status="success")
        else:
            return render_template('index.html',
                                   form=form,
                                   upload_status="failed")
    return render_template('index.html', form=form, upload_status=None)


@app.route('/upload_image', methods=['GET', 'POST'])
def upload_image():
    form = UploadForm()
    if form.validate_on_submit():
        filename = secure_filename(form.upload_file.data.filename)
        if is_valid_ext(filename, app.config['allowed_image_ext']):
            form.upload_file.data.save(
                os.path.join(app.config['image_upload_dir'], filename))
            return render_template('index.html',
                                   form=form,
                                   upload_status="success")
        else:
            return render_template('index.html',
                                   form=form,
                                   upload_status="failed")
    return render_template('index.html', form=form, upload_status=None)


@app.route('/show_upload')
def show_upload():
    csv_files = os.listdir(app.config['csv_upload_dir'])
    image_files = os.listdir(app.config['image_upload_dir'])
    return render_template('show_upload.html',
                           csv_files=csv_files,
                           image_files=image_files)


@app.route('/query1', methods=['GET', 'POST'])
def query1():
    form = Query1Form()
    if form.validate_on_submit():
        low = form.low.data
        high = form.high.data
        if low is None and high is not None:
            result = Entity.query.filter(Entity.room < high).all()
        elif low is not None and high is None:
            result = Entity.query.filter(Entity.room > low).all()
        elif low is not None and high is not None:
            result = Entity.query.filter((Entity.room > low)
                                         & (Entity.room < high)).all()
        else:
            result = Entity.query.all()
        result = check_image_file_exist(result)
        return render_template('query2.html', form=form, result=result)
    return render_template('query1.html', form=form)


@app.route('/query2', methods=['GET', 'POST'])
def query2():
    form = Query2Form()
    if form.validate_on_submit():
        search_category = form.search_category.data
        data = form.data.data
        category = form.category.data
        modified = form.modified.data
        filename = secure_filename(form.image.data.filename)
        if search_category == 'id':
            result = Entity.query.filter_by(id=data).all()
        elif search_category == 'room':
            result = Entity.query.filter_by(room=data).all()
        else:
            pass
        if (len(result) == 1):
            if category == 'name':
                setattr(result[0], category, modified)
                db.session.commit()
                message = 'Modified success'
                result = check_image_file_exist(result)
            elif category == 'picture':
                if is_valid_ext(filename, app.config['allowed_image_ext']):
                    form.image.data.save(os.path.join(app.config['image_upload_dir'], filename))
                    result[0].picture = filename
                    db.session.commit()
                    message = "Modified success"
                else:
                    message = "Modified failed"
            return render_template('query2.html',
                                form=form,
                                result=result,
                                message=message)
        else:
            message = 'No result or multiple result'
            result = check_image_file_exist(result)
            return render_template('query2.html',
                                   form=form,
                                   result=result,
                                   message=message)
    return render_template('query2.html', form=form)
'''